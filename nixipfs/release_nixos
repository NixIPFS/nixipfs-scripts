#!/usr/bin/env python
import sys
import argparse
import os
import json
from nixipfs.create_channel_release import create_channel_release
from nixipfs.create_nixipfs import create_nixipfs
from nixipfs.garbage_collect import garbage_collect
from nixipfs.update_binary_cache import update_binary_cache
from nixipfs.nix_helpers import NarInfo
from glob import glob

def release_nixos(outdir, tmpdir, ipfsapi, print_only, no_ipfs, gc, config):
    releases = config["releases"]
    hydra = config["hydra"]
    cache = config["cache"]
    target_cache = config["target_cache"]
    max_threads = 9

    cache_info = {'StoreDir' : '/nix/store', 'WantMassQuery' : '1', 'Priority' : '40' }

    paths = []
    binary_cache_dir  = os.path.join(outdir, 'binary_cache')
    channel_dir = os.path.join(outdir, 'channels')
    releases_dir = os.path.join(outdir, 'releases')
    os.makedirs(channel_dir, exist_ok=True)
    os.makedirs(releases_dir, exist_ok=True)

    for release in releases:
        path = create_channel_release(channel = release['channel'],
                                      hydra   = hydra,
                                      project = release['project'],
                                      jobset  = release['jobset'],
                                      cache   = cache,
                                      outdir  = releases_dir,
                                      tmpdir  = tmpdir,
                                      target_cache = target_cache)
        if not len(path):
            print("Could not release {}".format(release))
            sys.exit()
        else:
            paths.append(path)
        update_binary_cache(cache, path, outdir, max_threads, print_only, cache_info)
        channel_link = os.path.join(channel_dir, release['channel'])
        if os.path.islink(channel_link):
            os.unlink(channel_link)
        os.symlink(path, channel_link)

    if not os.path.isfile(os.path.join(binary_cache_dir, 'nix-cache-info')):
        nci = NarInfo()
        nci.d = cache_info
        with open(os.path.join(binary_cache_dir, 'nix-cache-info'), 'w') as f:
            f.write(nci.to_string())

    if gc:
        release_dirs = []
        for release_name in [ e.rstrip('/') for e in glob(releases_dir + '/*/')]:
            for release_dir in [ e.rstrip('/') for e in glob(release_name + '/*/')]:
                release_dirs.append(release_dir)
        garbage_paths = garbage_collect.find_garbage(binary_cache_dir, release_dirs)
        for g in garbage_paths:
            if os.path.isfile(os.path.join(binary_cache_dir, g)):
                print("GC: deleting {}".format(g))
                os.unlink(os.path.join(binary_cache_dir, g))

    if not (print_only or no_ipfs):
        create_nixipfs(outdir, ipfsapi)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Release all the things! (NixOS)')
    parser.add_argument('--ipfsapi', default=('127.0.0.1', 5001), nargs=2, metavar="IP PORT")
    parser.add_argument('--dir', required=True)
    parser.add_argument('--tmpdir', required=True)
    parser.add_argument('--print_only', action='store_true')
    parser.add_argument('--gc', action='store_true')
    parser.add_argument('--no_ipfs', action='store_true')
    parser.add_argument('--config', required=True)
    args = parser.parse_args()
    with open(args.config, "r") as f:
        config = json.load(f)
    release_nixos(outdir=args.dir, tmpdir=args.tmpdir, ipfsapi=args.ipfsapi, print_only=args.print_only, no_ipfs=args.no_ipfs, gc=args.gc, config=config)
